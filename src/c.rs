/* automatically generated by rust-bindgen */

use libc::*;

// Manually generated from term.h
// TODO less manual would be appreciated
pub type TERMINAL = c_void;
#[link(name = "ncursesw")]
extern {
    pub static cur_term: *mut TERMINAL;

    // These are static arrays of unknown length, which is hard to express in
    // Rust; fudge it here and do pointer mangling in Rust-land
    pub static boolnames: [*const c_char; 1];
    pub static numnames: [*const c_char; 1];
    pub static strnames: [*const c_char; 1];
    pub static boolcodes: [*const c_char; 1];

    pub fn setupterm(term: *const c_char, arg2: c_int, arg3: *mut c_int) -> c_int;
    pub fn set_curterm(arg1: *mut TERMINAL) -> *mut TERMINAL;
    pub fn tparm(format: *const c_char, arg1: c_long, arg2: c_long, arg3: c_long, arg4: c_long, arg5: c_long, arg6: c_long, arg7: c_long, arg8: c_long, arg9: c_long) -> *const c_char;
}



// This is not necessarily true, but it's *probably* true.  Defined in wchar.h
// but missing from Rust's libc definitions.
pub type wint_t = c_uint;
pub static WEOF: c_uint = 0xffffffff;

pub type chtype = c_uint;
pub type mmask_t = c_ulong;
pub type NCURSES_BOOL = c_uchar;
pub type Struct_screen = c_void;
pub type SCREEN = Struct_screen;
pub type WINDOW = Struct__win_st;
pub type attr_t = chtype;
#[repr(C)]
pub struct cchar_t {
    attr: attr_t,
    chars: [wchar_t; 5],
}
pub type Struct_ldat = c_void;
#[repr(C)]
pub struct Struct__win_st {
    _cury: c_short,
    _curx: c_short,
    _maxy: c_short,
    _maxx: c_short,
    _begy: c_short,
    _begx: c_short,
    _flags: c_short,
    _attrs: attr_t,
    _bkgd: chtype,
    _notimeout: c_int,
    _clear: c_int,
    _leaveok: c_int,
    _scroll: c_int,
    _idlok: c_int,
    _idcok: c_int,
    _immed: c_int,
    _sync: c_int,
    _use_keypad: c_int,
    _delay: c_int,
    _line: *mut Struct_ldat,
    _regtop: c_short,
    _regbottom: c_short,
    _parx: c_int,
    _pary: c_int,
    _parent: *mut WINDOW,
    _pad: Struct_pdat,
    _yoffset: c_short,
    _bkgrnd: cchar_t,
}
#[repr(C)]
pub struct Struct_pdat {
    _pad_y: c_short,
    _pad_x: c_short,
    _pad_top: c_short,
    _pad_left: c_short,
    _pad_bottom: c_short,
    _pad_right: c_short,
}
pub type NCURSES_OUTC = *mut u8;
pub type NCURSES_WINDOW_CB = *mut u8;
pub type NCURSES_SCREEN_CB = *mut u8;
#[repr(C)]
pub struct MEVENT {
    id: c_short,
    x: c_int,
    y: c_int,
    z: c_int,
    bstate: mmask_t,
}
#[link(name = "ncursesw")]
extern {
    pub static acs_map: c_void;
    pub static curscr: *mut WINDOW;
    pub static newscr: *mut WINDOW;
    pub static stdscr: *mut WINDOW;
    pub static ttytype: c_void;
    pub static COLORS: c_int;
    pub static COLOR_PAIRS: c_int;
    pub static COLS: c_int;
    pub static ESCDELAY: c_int;
    pub static LINES: c_int;
    pub static TABSIZE: c_int;
    pub static _nc_wacs: *mut cchar_t;
    //wide: fn addch(arg1: chtype) -> c_int;
    //wide: fn addchnstr(arg1: *mut chtype, arg2: c_int) -> c_int;
    //wide: fn addchstr(arg1: *mut chtype) -> c_int;
    //wide: fn addnstr(arg1: *mut c_schar, arg2: c_int) -> c_int;
    //wide: fn addstr(arg1: *mut c_schar) -> c_int;
    pub fn attroff(arg1: c_int) -> c_int;
    pub fn attron(arg1: c_int) -> c_int;
    pub fn attrset(arg1: c_int) -> c_int;
    pub fn attr_get(arg1: *mut attr_t, arg2: *mut c_short, arg3: *mut c_void) -> c_int;
    pub fn attr_off(arg1: attr_t, arg2: *mut c_void) -> c_int;
    pub fn attr_on(arg1: attr_t, arg2: *mut c_void) -> c_int;
    pub fn attr_set(arg1: attr_t, arg2: c_short, arg3: *mut c_void) -> c_int;
    pub fn baudrate() -> c_int;
    pub fn beep() -> c_int;
    //wide: fn bkgd(arg1: chtype) -> c_int;
    //wide: fn bkgdset(arg1: chtype);
    //wide: fn border(arg1: chtype, arg2: chtype, arg3: chtype, arg4: chtype, arg5: chtype, arg6: chtype, arg7: chtype, arg8: chtype) -> c_int;
    //wide: fn box(arg1: *mut WINDOW, arg2: chtype, arg3: chtype) -> c_int;
    pub fn can_change_color() -> c_int;
    pub fn cbreak() -> c_int;
    pub fn chgat(arg1: c_int, arg2: attr_t, arg3: c_short, arg4: *mut c_void) -> c_int;
    pub fn clear() -> c_int;
    pub fn clearok(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn clrtobot() -> c_int;
    pub fn clrtoeol() -> c_int;
    pub fn color_content(arg1: c_short, arg2: *mut c_short, arg3: *mut c_short, arg4: *mut c_short) -> c_int;
    pub fn color_set(arg1: c_short, arg2: *mut c_void) -> c_int;
    pub fn COLOR_PAIR(arg1: c_int) -> c_int;
    pub fn copywin(arg1: *mut WINDOW, arg2: *mut WINDOW, arg3: c_int, arg4: c_int, arg5: c_int, arg6: c_int, arg7: c_int, arg8: c_int, arg9: c_int) -> c_int;
    pub fn curs_set(arg1: c_int) -> c_int;
    pub fn def_prog_mode() -> c_int;
    pub fn def_shell_mode() -> c_int;
    pub fn delay_output(arg1: c_int) -> c_int;
    pub fn delch() -> c_int;
    pub fn delscreen(arg1: *mut SCREEN);
    pub fn delwin(arg1: *mut WINDOW) -> c_int;
    pub fn deleteln() -> c_int;
    pub fn derwin(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: c_int, arg5: c_int) -> *mut WINDOW;
    pub fn doupdate() -> c_int;
    pub fn dupwin(arg1: *mut WINDOW) -> *mut WINDOW;
    pub fn echo() -> c_int;
    //wide: fn echochar(arg1: chtype) -> c_int;
    pub fn erase() -> c_int;
    pub fn endwin() -> c_int;
    //wide: fn erasechar() -> c_schar;
    pub fn filter();
    pub fn flash() -> c_int;
    pub fn flushinp() -> c_int;
    //wide: fn getbkgd(arg1: *mut WINDOW) -> chtype;
    //wide: fn getch() -> c_int;
    //wide: fn getnstr(arg1: *mut c_schar, arg2: c_int) -> c_int;
    //wide: fn getstr(arg1: *mut c_schar) -> c_int;
    pub fn getwin(arg1: *mut FILE) -> *mut WINDOW;
    pub fn halfdelay(arg1: c_int) -> c_int;
    pub fn has_colors() -> c_int;
    pub fn has_ic() -> c_int;
    pub fn has_il() -> c_int;
    //wide: fn hline(arg1: chtype, arg2: c_int) -> c_int;
    pub fn idcok(arg1: *mut WINDOW, arg2: c_int);
    pub fn idlok(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn immedok(arg1: *mut WINDOW, arg2: c_int);
    //wide: fn inch() -> chtype;
    //wide: fn inchnstr(arg1: *mut chtype, arg2: c_int) -> c_int;
    //wide: fn inchstr(arg1: *mut chtype) -> c_int;
    pub fn initscr() -> *mut WINDOW;
    pub fn init_color(arg1: c_short, arg2: c_short, arg3: c_short, arg4: c_short) -> c_int;
    pub fn init_pair(arg1: c_short, arg2: c_short, arg3: c_short) -> c_int;
    //wide: fn innstr(arg1: *mut c_schar, arg2: c_int) -> c_int;
    //wide: fn insch(arg1: chtype) -> c_int;
    pub fn insdelln(arg1: c_int) -> c_int;
    pub fn insertln() -> c_int;
    //wide: fn insnstr(arg1: *mut c_schar, arg2: c_int) -> c_int;
    //wide: fn insstr(arg1: *mut c_schar) -> c_int;
    //wide: fn instr(arg1: *mut c_schar) -> c_int;
    pub fn intrflush(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn isendwin() -> c_int;
    pub fn is_linetouched(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn is_wintouched(arg1: *mut WINDOW) -> c_int;
    //wide: fn keyname(arg1: c_int) -> *mut c_schar;
    pub fn keypad(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    //wide: fn killchar() -> c_schar;
    pub fn leaveok(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn longname() -> *mut c_schar;
    pub fn meta(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    //wide: fn mvaddch(arg1: c_int, arg2: c_int, arg3: chtype) -> c_int;
    //wide: fn mvaddchnstr(arg1: c_int, arg2: c_int, arg3: *mut chtype, arg4: c_int) -> c_int;
    //wide: fn mvaddchstr(arg1: c_int, arg2: c_int, arg3: *mut chtype) -> c_int;
    //wide: fn mvaddnstr(arg1: c_int, arg2: c_int, arg3: *mut c_schar, arg4: c_int) -> c_int;
    //wide: fn mvaddstr(arg1: c_int, arg2: c_int, arg3: *mut c_schar) -> c_int;
    pub fn mvchgat(arg1: c_int, arg2: c_int, arg3: c_int, arg4: attr_t, arg5: c_short, arg6: *mut c_void) -> c_int;
    pub fn mvcur(arg1: c_int, arg2: c_int, arg3: c_int, arg4: c_int) -> c_int;
    pub fn mvdelch(arg1: c_int, arg2: c_int) -> c_int;
    pub fn mvderwin(arg1: *mut WINDOW, arg2: c_int, arg3: c_int) -> c_int;
    //wide: fn mvgetch(arg1: c_int, arg2: c_int) -> c_int;
    //wide: fn mvgetnstr(arg1: c_int, arg2: c_int, arg3: *mut c_schar, arg4: c_int) -> c_int;
    //wide: fn mvgetstr(arg1: c_int, arg2: c_int, arg3: *mut c_schar) -> c_int;
    //wide: fn mvhline(arg1: c_int, arg2: c_int, arg3: chtype, arg4: c_int) -> c_int;
    //wide: fn mvinch(arg1: c_int, arg2: c_int) -> chtype;
    //wide: fn mvinchnstr(arg1: c_int, arg2: c_int, arg3: *mut chtype, arg4: c_int) -> c_int;
    //wide: fn mvinchstr(arg1: c_int, arg2: c_int, arg3: *mut chtype) -> c_int;
    //wide: fn mvinnstr(arg1: c_int, arg2: c_int, arg3: *mut c_schar, arg4: c_int) -> c_int;
    //wide: fn mvinsch(arg1: c_int, arg2: c_int, arg3: chtype) -> c_int;
    //wide: fn mvinsnstr(arg1: c_int, arg2: c_int, arg3: *mut c_schar, arg4: c_int) -> c_int;
    //wide: fn mvinsstr(arg1: c_int, arg2: c_int, arg3: *mut c_schar) -> c_int;
    //wide: fn mvinstr(arg1: c_int, arg2: c_int, arg3: *mut c_schar) -> c_int;
    pub fn mvprintw(arg1: c_int, arg2: c_int, arg3: *mut c_schar) -> c_int;
    pub fn mvscanw(arg1: c_int, arg2: c_int, arg3: *mut c_schar) -> c_int;
    //wide: fn mvvline(arg1: c_int, arg2: c_int, arg3: chtype, arg4: c_int) -> c_int;
    //wide: fn mvwaddch(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: chtype) -> c_int;
    //wide: fn mvwaddchnstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut chtype, arg5: c_int) -> c_int;
    //wide: fn mvwaddchstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut chtype) -> c_int;
    //wide: fn mvwaddnstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut c_schar, arg5: c_int) -> c_int;
    //wide: fn mvwaddstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut c_schar) -> c_int;
    pub fn mvwchgat(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: c_int, arg5: attr_t, arg6: c_short, arg7: *mut c_void) -> c_int;
    pub fn mvwdelch(arg1: *mut WINDOW, arg2: c_int, arg3: c_int) -> c_int;
    //wide: fn mvwgetch(arg1: *mut WINDOW, arg2: c_int, arg3: c_int) -> c_int;
    //wide: fn mvwgetnstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut c_schar, arg5: c_int) -> c_int;
    //wide: fn mvwgetstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut c_schar) -> c_int;
    //wide: fn mvwhline(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: chtype, arg5: c_int) -> c_int;
    //wide: fn mvwin(arg1: *mut WINDOW, arg2: c_int, arg3: c_int) -> c_int;
    //wide: fn mvwinch(arg1: *mut WINDOW, arg2: c_int, arg3: c_int) -> chtype;
    //wide: fn mvwinchnstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut chtype, arg5: c_int) -> c_int;
    //wide: fn mvwinchstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut chtype) -> c_int;
    //wide: fn mvwinnstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut c_schar, arg5: c_int) -> c_int;
    //wide: fn mvwinsch(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: chtype) -> c_int;
    //wide: fn mvwinsnstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut c_schar, arg5: c_int) -> c_int;
    //wide: fn mvwinsstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut c_schar) -> c_int;
    //wide: fn mvwinstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut c_schar) -> c_int;
    pub fn mvwprintw(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut c_schar) -> c_int;
    pub fn mvwscanw(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut c_schar) -> c_int;
    //wide: fn mvwvline(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: chtype, arg5: c_int) -> c_int;
    pub fn napms(arg1: c_int) -> c_int;
    pub fn newpad(arg1: c_int, arg2: c_int) -> *mut WINDOW;
    pub fn newterm(arg1: *mut c_schar, arg2: *mut FILE, arg3: *mut FILE) -> *mut SCREEN;
    pub fn newwin(arg1: c_int, arg2: c_int, arg3: c_int, arg4: c_int) -> *mut WINDOW;
    pub fn nl() -> c_int;
    pub fn nocbreak() -> c_int;
    pub fn nodelay(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn noecho() -> c_int;
    pub fn nonl() -> c_int;
    pub fn noqiflush();
    pub fn noraw() -> c_int;
    pub fn notimeout(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn overlay(arg1: *mut WINDOW, arg2: *mut WINDOW) -> c_int;
    pub fn overwrite(arg1: *mut WINDOW, arg2: *mut WINDOW) -> c_int;
    pub fn pair_content(arg1: c_short, arg2: *mut c_short, arg3: *mut c_short) -> c_int;
    pub fn PAIR_NUMBER(arg1: c_int) -> c_int;
    //wide: fn pechochar(arg1: *mut WINDOW, arg2: chtype) -> c_int;
    pub fn pnoutrefresh(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: c_int, arg5: c_int, arg6: c_int, arg7: c_int) -> c_int;
    pub fn prefresh(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: c_int, arg5: c_int, arg6: c_int, arg7: c_int) -> c_int;
    pub fn printw(arg1: *mut c_schar) -> c_int;
    pub fn putwin(arg1: *mut WINDOW, arg2: *mut FILE) -> c_int;
    pub fn qiflush();
    pub fn raw() -> c_int;
    pub fn redrawwin(arg1: *mut WINDOW) -> c_int;
    pub fn refresh() -> c_int;
    pub fn resetty() -> c_int;
    pub fn reset_prog_mode() -> c_int;
    pub fn reset_shell_mode() -> c_int;
    pub fn ripoffline(arg1: c_int, arg2: *mut u8) -> c_int;
    pub fn savetty() -> c_int;
    pub fn scanw(arg1: *mut c_schar) -> c_int;
    pub fn scr_dump(arg1: *mut c_schar) -> c_int;
    pub fn scr_init(arg1: *mut c_schar) -> c_int;
    pub fn scrl(arg1: c_int) -> c_int;
    pub fn scroll(arg1: *mut WINDOW) -> c_int;
    pub fn scrollok(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn scr_restore(arg1: *mut c_schar) -> c_int;
    pub fn scr_set(arg1: *mut c_schar) -> c_int;
    pub fn setscrreg(arg1: c_int, arg2: c_int) -> c_int;
    pub fn set_term(arg1: *mut SCREEN) -> *mut SCREEN;
    pub fn slk_attroff(arg1: chtype) -> c_int;
    pub fn slk_attr_off(arg1: attr_t, arg2: *mut c_void) -> c_int;
    pub fn slk_attron(arg1: chtype) -> c_int;
    pub fn slk_attr_on(arg1: attr_t, arg2: *mut c_void) -> c_int;
    pub fn slk_attrset(arg1: chtype) -> c_int;
    pub fn slk_attr() -> attr_t;
    pub fn slk_attr_set(arg1: attr_t, arg2: c_short, arg3: *mut c_void) -> c_int;
    pub fn slk_clear() -> c_int;
    pub fn slk_color(arg1: c_short) -> c_int;
    pub fn slk_init(arg1: c_int) -> c_int;
    pub fn slk_label(arg1: c_int) -> *mut c_schar;
    pub fn slk_noutrefresh() -> c_int;
    pub fn slk_refresh() -> c_int;
    pub fn slk_restore() -> c_int;
    //wide: fn slk_set(arg1: c_int, arg2: *mut c_schar, arg3: c_int) -> c_int;
    pub fn slk_touch() -> c_int;
    pub fn standout() -> c_int;
    pub fn standend() -> c_int;
    pub fn start_color() -> c_int;
    pub fn subpad(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: c_int, arg5: c_int) -> *mut WINDOW;
    pub fn subwin(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: c_int, arg5: c_int) -> *mut WINDOW;
    pub fn syncok(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    //wide: fn termattrs() -> chtype;
    pub fn termname() -> *mut c_schar;
    pub fn timeout(arg1: c_int);
    pub fn touchline(arg1: *mut WINDOW, arg2: c_int, arg3: c_int) -> c_int;
    pub fn touchwin(arg1: *mut WINDOW) -> c_int;
    pub fn typeahead(arg1: c_int) -> c_int;
    //wide: fn ungetch(arg1: c_int) -> c_int;
    pub fn untouchwin(arg1: *mut WINDOW) -> c_int;
    pub fn use_env(arg1: c_int);
    //wide: fn vidattr(arg1: chtype) -> c_int;
    //wide: fn vidputs(arg1: chtype, arg2: NCURSES_OUTC) -> c_int;
    //wide: fn vline(arg1: chtype, arg2: c_int) -> c_int;
    // varargs aren't supported by Rust, but these are covered by the fmt!
    // macro anyway
    /*
    fn vwprintw(arg1: *mut WINDOW, arg2: *mut c_schar, arg3: *mut __va_list_tag) -> c_int;
    fn vw_printw(arg1: *mut WINDOW, arg2: *mut c_schar, arg3: *mut __va_list_tag) -> c_int;
    fn vwscanw(arg1: *mut WINDOW, arg2: *mut c_schar, arg3: *mut __va_list_tag) -> c_int;
    fn vw_scanw(arg1: *mut WINDOW, arg2: *mut c_schar, arg3: *mut __va_list_tag) -> c_int;
    */
    //wide: fn waddch(arg1: *mut WINDOW, arg2: chtype) -> c_int;
    //wide: fn waddchnstr(arg1: *mut WINDOW, arg2: *mut chtype, arg3: c_int) -> c_int;
    //wide: fn waddchstr(arg1: *mut WINDOW, arg2: *mut chtype) -> c_int;
    //wide: fn waddnstr(arg1: *mut WINDOW, arg2: *mut c_schar, arg3: c_int) -> c_int;
    //wide: fn waddstr(arg1: *mut WINDOW, arg2: *mut c_schar) -> c_int;
    pub fn wattron(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn wattroff(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn wattrset(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn wattr_get(arg1: *mut WINDOW, arg2: *mut attr_t, arg3: *mut c_short, arg4: *mut c_void) -> c_int;
    pub fn wattr_on(arg1: *mut WINDOW, arg2: attr_t, arg3: *mut c_void) -> c_int;
    pub fn wattr_off(arg1: *mut WINDOW, arg2: attr_t, arg3: *mut c_void) -> c_int;
    pub fn wattr_set(arg1: *mut WINDOW, arg2: attr_t, arg3: c_short, arg4: *mut c_void) -> c_int;
    //wide: fn wbkgd(arg1: *mut WINDOW, arg2: chtype) -> c_int;
    //wide: fn wbkgdset(arg1: *mut WINDOW, arg2: chtype);
    //wide: fn wborder(arg1: *mut WINDOW, arg2: chtype, arg3: chtype, arg4: chtype, arg5: chtype, arg6: chtype, arg7: chtype, arg8: chtype, arg9: chtype) -> c_int;
    pub fn wchgat(arg1: *mut WINDOW, arg2: c_int, arg3: attr_t, arg4: c_short, arg5: *mut c_void) -> c_int;
    pub fn wclear(arg1: *mut WINDOW) -> c_int;
    pub fn wclrtobot(arg1: *mut WINDOW) -> c_int;
    pub fn wclrtoeol(arg1: *mut WINDOW) -> c_int;
    pub fn wcolor_set(arg1: *mut WINDOW, arg2: c_short, arg3: *mut c_void) -> c_int;
    pub fn wcursyncup(arg1: *mut WINDOW);
    pub fn wdelch(arg1: *mut WINDOW) -> c_int;
    pub fn wdeleteln(arg1: *mut WINDOW) -> c_int;
    //wide: fn wechochar(arg1: *mut WINDOW, arg2: chtype) -> c_int;
    pub fn werase(arg1: *mut WINDOW) -> c_int;
    //wide: fn wgetch(arg1: *mut WINDOW) -> c_int;
    //wide: fn wgetnstr(arg1: *mut WINDOW, arg2: *mut c_schar, arg3: c_int) -> c_int;
    //wide: fn wgetstr(arg1: *mut WINDOW, arg2: *mut c_schar) -> c_int;
    //wide: fn whline(arg1: *mut WINDOW, arg2: chtype, arg3: c_int) -> c_int;
    //wide: fn winch(arg1: *mut WINDOW) -> chtype;
    //wide: fn winchnstr(arg1: *mut WINDOW, arg2: *mut chtype, arg3: c_int) -> c_int;
    //wide: fn winchstr(arg1: *mut WINDOW, arg2: *mut chtype) -> c_int;
    //wide: fn winnstr(arg1: *mut WINDOW, arg2: *mut c_schar, arg3: c_int) -> c_int;
    //wide: fn winsch(arg1: *mut WINDOW, arg2: chtype) -> c_int;
    pub fn winsdelln(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn winsertln(arg1: *mut WINDOW) -> c_int;
    //wide: fn winsnstr(arg1: *mut WINDOW, arg2: *mut c_schar, arg3: c_int) -> c_int;
    //wide: fn winsstr(arg1: *mut WINDOW, arg2: *mut c_schar) -> c_int;
    //wide: fn winstr(arg1: *mut WINDOW, arg2: *mut c_schar) -> c_int;
    pub fn wmove(arg1: *mut WINDOW, arg2: c_int, arg3: c_int) -> c_int;
    pub fn wnoutrefresh(arg1: *mut WINDOW) -> c_int;
    pub fn wprintw(arg1: *mut WINDOW, arg2: *mut c_schar) -> c_int;
    pub fn wredrawln(arg1: *mut WINDOW, arg2: c_int, arg3: c_int) -> c_int;
    pub fn wrefresh(arg1: *mut WINDOW) -> c_int;
    pub fn wscanw(arg1: *mut WINDOW, arg2: *mut c_schar) -> c_int;
    pub fn wscrl(arg1: *mut WINDOW, arg2: c_int) -> c_int;
    pub fn wsetscrreg(arg1: *mut WINDOW, arg2: c_int, arg3: c_int) -> c_int;
    pub fn wstandout(arg1: *mut WINDOW) -> c_int;
    pub fn wstandend(arg1: *mut WINDOW) -> c_int;
    pub fn wsyncdown(arg1: *mut WINDOW);
    pub fn wsyncup(arg1: *mut WINDOW);
    pub fn wtimeout(arg1: *mut WINDOW, arg2: c_int);
    pub fn wtouchln(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: c_int) -> c_int;
    //wide: fn wvline(arg1: *mut WINDOW, arg2: chtype, arg3: c_int) -> c_int;
    pub fn tigetflag(arg1: *const c_schar) -> c_int;
    pub fn tigetnum(arg1: *const c_schar) -> c_int;
    pub fn tigetstr(arg1: *const c_schar) -> *const c_schar;
    pub fn putp(arg1: *const c_schar) -> c_int;
    //fn tparm(arg1: *mut c_schar, arg2: c_int, arg3: c_int) -> *mut c_schar;
    pub fn tiparm(arg1: *mut c_schar) -> *mut c_schar;
    pub fn getattrs(arg1: *mut WINDOW) -> c_int;
    pub fn getcurx(arg1: *mut WINDOW) -> c_int;
    pub fn getcury(arg1: *mut WINDOW) -> c_int;
    pub fn getbegx(arg1: *mut WINDOW) -> c_int;
    pub fn getbegy(arg1: *mut WINDOW) -> c_int;
    pub fn getmaxx(arg1: *mut WINDOW) -> c_int;
    pub fn getmaxy(arg1: *mut WINDOW) -> c_int;
    pub fn getparx(arg1: *mut WINDOW) -> c_int;
    pub fn getpary(arg1: *mut WINDOW) -> c_int;
    pub fn is_term_resized(arg1: c_int, arg2: c_int) -> c_int;
    pub fn keybound(arg1: c_int, arg2: c_int) -> *mut c_schar;
    pub fn curses_version() -> *mut c_schar;
    pub fn assume_default_colors(arg1: c_int, arg2: c_int) -> c_int;
    pub fn define_key(arg1: *mut c_schar, arg2: c_int) -> c_int;
    pub fn get_escdelay() -> c_int;
    pub fn key_defined(arg1: *mut c_schar) -> c_int;
    pub fn keyok(arg1: c_int, arg2: c_int) -> c_int;
    pub fn resize_term(arg1: c_int, arg2: c_int) -> c_int;
    pub fn resizeterm(arg1: c_int, arg2: c_int) -> c_int;
    pub fn set_escdelay(arg1: c_int) -> c_int;
    pub fn set_tabsize(arg1: c_int) -> c_int;
    pub fn use_default_colors() -> c_int;
    pub fn use_extended_names(arg1: c_int) -> c_int;
    pub fn use_legacy_coding(arg1: c_int) -> c_int;
    pub fn use_screen(arg1: *mut SCREEN, arg2: NCURSES_SCREEN_CB, arg3: *mut c_void) -> c_int;
    pub fn use_window(arg1: *mut WINDOW, arg2: NCURSES_WINDOW_CB, arg3: *mut c_void) -> c_int;
    pub fn wresize(arg1: *mut WINDOW, arg2: c_int, arg3: c_int) -> c_int;
    pub fn nofilter();
    pub fn wgetparent(arg1: *mut WINDOW) -> *mut WINDOW;
    pub fn is_cleared(arg1: *mut WINDOW) -> c_int;
    pub fn is_idcok(arg1: *mut WINDOW) -> c_int;
    pub fn is_idlok(arg1: *mut WINDOW) -> c_int;
    pub fn is_immedok(arg1: *mut WINDOW) -> c_int;
    pub fn is_keypad(arg1: *mut WINDOW) -> c_int;
    pub fn is_leaveok(arg1: *mut WINDOW) -> c_int;
    pub fn is_nodelay(arg1: *mut WINDOW) -> c_int;
    pub fn is_notimeout(arg1: *mut WINDOW) -> c_int;
    pub fn is_pad(arg1: *mut WINDOW) -> c_int;
    pub fn is_scrollok(arg1: *mut WINDOW) -> c_int;
    pub fn is_subwin(arg1: *mut WINDOW) -> c_int;
    pub fn is_syncok(arg1: *mut WINDOW) -> c_int;
    pub fn wgetscrreg(arg1: *mut WINDOW, arg2: *mut c_int, arg3: *mut c_int) -> c_int;
    pub fn has_mouse() -> c_int;
    pub fn getmouse(arg1: *mut MEVENT) -> c_int;
    pub fn ungetmouse(arg1: *mut MEVENT) -> c_int;
    pub fn mousemask(arg1: mmask_t, arg2: *mut mmask_t) -> mmask_t;
    pub fn wenclose(arg1: *mut WINDOW, arg2: c_int, arg3: c_int) -> c_int;
    pub fn mouseinterval(arg1: c_int) -> c_int;
    pub fn wmouse_trafo(arg1: *mut WINDOW, arg2: *mut c_int, arg3: *mut c_int, arg4: c_int) -> c_int;
    pub fn mouse_trafo(arg1: *mut c_int, arg2: *mut c_int, arg3: c_int) -> c_int;
    pub fn mcprint(arg1: *mut c_schar, arg2: c_int) -> c_int;
    pub fn has_key(arg1: c_int) -> c_int;

    // Debug only
    /*
    fn _move(arg1: c_int, arg2: c_int) -> c_int;
    fn _tracef(arg1: *mut c_schar);
    fn _tracedump(arg1: *mut c_schar, arg2: *mut WINDOW);
    fn _traceattr(arg1: attr_t) -> *mut c_schar;
    fn _traceattr2(arg1: c_int, arg2: chtype) -> *mut c_schar;
    fn _nc_tracebits() -> *mut c_schar;
    fn _tracechar(arg1: c_int) -> *mut c_schar;
    fn _tracechtype(arg1: chtype) -> *mut c_schar;
    fn _tracechtype2(arg1: c_int, arg2: chtype) -> *mut c_schar;
    fn _tracemouse(arg1: *mut MEVENT) -> *mut c_schar;
    fn trace(arg1: c_uint);
    */

    // Wide-character functions, only available in ncursesw.
    // Each of these obsoletes something above, marked with a '//wide:'
    pub fn add_wch(arg1: *mut cchar_t) -> c_int;
    pub fn add_wchnstr(arg1: *mut cchar_t, arg2: c_int) -> c_int;
    pub fn add_wchstr(arg1: *mut cchar_t) -> c_int;
    pub fn addnwstr(arg1: *mut wchar_t, arg2: c_int) -> c_int;
    pub fn addwstr(arg1: *mut wchar_t) -> c_int;
    pub fn bkgrnd(arg1: *mut cchar_t) -> c_int;
    pub fn bkgrndset(arg1: *mut cchar_t);
    pub fn border_set(arg1: *mut cchar_t, arg2: *mut cchar_t, arg3: *mut cchar_t, arg4: *mut cchar_t, arg5: *mut cchar_t, arg6: *mut cchar_t, arg7: *mut cchar_t, arg8: *mut cchar_t) -> c_int;
    pub fn box_set(arg1: *mut WINDOW, arg2: *mut cchar_t, arg3: *mut cchar_t) -> c_int;
    pub fn echo_wchar(arg1: *mut cchar_t) -> c_int;
    pub fn erasewchar(arg1: *mut wchar_t) -> c_int;
    pub fn get_wch(arg1: *mut wint_t) -> c_int;
    pub fn get_wstr(arg1: *mut wint_t) -> c_int;
    pub fn getbkgrnd(arg1: *mut cchar_t) -> c_int;
    pub fn getcchar(arg1: *mut cchar_t, arg2: *mut wchar_t, arg3: *mut attr_t, arg4: *mut c_short, arg5: *mut c_void) -> c_int;
    pub fn getn_wstr(arg1: *mut wint_t, arg2: c_int) -> c_int;
    pub fn hline_set(arg1: *mut cchar_t, arg2: c_int) -> c_int;
    pub fn in_wch(arg1: *mut cchar_t) -> c_int;
    pub fn in_wchnstr(arg1: *mut cchar_t, arg2: c_int) -> c_int;
    pub fn in_wchstr(arg1: *mut cchar_t) -> c_int;
    pub fn innwstr(arg1: *mut wchar_t, arg2: c_int) -> c_int;
    pub fn ins_nwstr(arg1: *mut wchar_t, arg2: c_int) -> c_int;
    pub fn ins_wch(arg1: *mut cchar_t) -> c_int;
    pub fn ins_wstr(arg1: *mut wchar_t) -> c_int;
    pub fn inwstr(arg1: *mut wchar_t) -> c_int;
    pub fn key_name(arg1: wchar_t) -> *mut c_schar;
    pub fn killwchar(arg1: *mut wchar_t) -> c_int;
    pub fn mvadd_wch(arg1: c_int, arg2: c_int, arg3: *mut cchar_t) -> c_int;
    pub fn mvadd_wchnstr(arg1: c_int, arg2: c_int, arg3: *mut cchar_t, arg4: c_int) -> c_int;
    pub fn mvadd_wchstr(arg1: c_int, arg2: c_int, arg3: *mut cchar_t) -> c_int;
    pub fn mvaddnwstr(arg1: c_int, arg2: c_int, arg3: *mut wchar_t, arg4: c_int) -> c_int;
    pub fn mvaddwstr(arg1: c_int, arg2: c_int, arg3: *mut wchar_t) -> c_int;
    pub fn mvget_wch(arg1: c_int, arg2: c_int, arg3: *mut wint_t) -> c_int;
    pub fn mvget_wstr(arg1: c_int, arg2: c_int, arg3: *mut wint_t) -> c_int;
    pub fn mvgetn_wstr(arg1: c_int, arg2: c_int, arg3: *mut wint_t, arg4: c_int) -> c_int;
    pub fn mvhline_set(arg1: c_int, arg2: c_int, arg3: *mut cchar_t, arg4: c_int) -> c_int;
    pub fn mvin_wch(arg1: c_int, arg2: c_int, arg3: *mut cchar_t) -> c_int;
    pub fn mvin_wchnstr(arg1: c_int, arg2: c_int, arg3: *mut cchar_t, arg4: c_int) -> c_int;
    pub fn mvin_wchstr(arg1: c_int, arg2: c_int, arg3: *mut cchar_t) -> c_int;
    pub fn mvinnwstr(arg1: c_int, arg2: c_int, arg3: *mut wchar_t, arg4: c_int) -> c_int;
    pub fn mvins_nwstr(arg1: c_int, arg2: c_int, arg3: *mut wchar_t, arg4: c_int) -> c_int;
    pub fn mvins_wch(arg1: c_int, arg2: c_int, arg3: *mut cchar_t) -> c_int;
    pub fn mvins_wstr(arg1: c_int, arg2: c_int, arg3: *mut wchar_t) -> c_int;
    pub fn mvinwstr(arg1: c_int, arg2: c_int, arg3: *mut wchar_t) -> c_int;
    pub fn mvvline_set(arg1: c_int, arg2: c_int, arg3: *mut cchar_t, arg4: c_int) -> c_int;
    pub fn mvwadd_wch(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut cchar_t) -> c_int;
    pub fn mvwadd_wchnstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut cchar_t, arg5: c_int) -> c_int;
    pub fn mvwadd_wchstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut cchar_t) -> c_int;
    pub fn mvwaddnwstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut wchar_t, arg5: c_int) -> c_int;
    pub fn mvwaddwstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut wchar_t) -> c_int;
    pub fn mvwget_wch(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut wint_t) -> c_int;
    pub fn mvwget_wstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut wint_t) -> c_int;
    pub fn mvwgetn_wstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut wint_t, arg5: c_int) -> c_int;
    pub fn mvwhline_set(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut cchar_t, arg5: c_int) -> c_int;
    pub fn mvwin_wch(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut cchar_t) -> c_int;
    pub fn mvwin_wchnstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut cchar_t, arg5: c_int) -> c_int;
    pub fn mvwin_wchstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut cchar_t) -> c_int;
    pub fn mvwinnwstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut wchar_t, arg5: c_int) -> c_int;
    pub fn mvwins_nwstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut wchar_t, arg5: c_int) -> c_int;
    pub fn mvwins_wch(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut cchar_t) -> c_int;
    pub fn mvwins_wstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut wchar_t) -> c_int;
    pub fn mvwinwstr(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut wchar_t) -> c_int;
    pub fn mvwvline_set(arg1: *mut WINDOW, arg2: c_int, arg3: c_int, arg4: *mut cchar_t, arg5: c_int) -> c_int;
    pub fn pecho_wchar(arg1: *mut WINDOW, arg2: *mut cchar_t) -> c_int;
    pub fn setcchar(arg1: *mut cchar_t, arg2: *mut wchar_t, arg3: attr_t, arg4: c_short, arg5: *mut c_void) -> c_int;
    pub fn slk_wset(arg1: c_int, arg2: *mut wchar_t, arg3: c_int) -> c_int;
    pub fn term_attrs() -> attr_t;
    pub fn unget_wch(arg1: wchar_t) -> c_int;
    pub fn vid_attr(arg1: attr_t, arg2: c_short, arg3: *mut c_void) -> c_int;
    pub fn vid_puts(arg1: attr_t, arg2: c_short, arg3: *mut c_void, arg4: NCURSES_OUTC) -> c_int;
    pub fn vline_set(arg1: *mut cchar_t, arg2: c_int) -> c_int;
    pub fn wadd_wch(arg1: *mut WINDOW, arg2: *mut cchar_t) -> c_int;
    pub fn wadd_wchnstr(arg1: *mut WINDOW, arg2: *mut cchar_t, arg3: c_int) -> c_int;
    pub fn wadd_wchstr(arg1: *mut WINDOW, arg2: *mut cchar_t) -> c_int;
    pub fn waddnwstr(arg1: *mut WINDOW, arg2: *mut wchar_t, arg3: c_int) -> c_int;
    pub fn waddwstr(arg1: *mut WINDOW, arg2: *mut wchar_t) -> c_int;
    pub fn wbkgrnd(arg1: *mut WINDOW, arg2: *mut cchar_t) -> c_int;
    pub fn wbkgrndset(arg1: *mut WINDOW, arg2: *mut cchar_t);
    pub fn wborder_set(arg1: *mut WINDOW, arg2: *mut cchar_t, arg3: *mut cchar_t, arg4: *mut cchar_t, arg5: *mut cchar_t, arg6: *mut cchar_t, arg7: *mut cchar_t, arg8: *mut cchar_t, arg9: *mut cchar_t) -> c_int;
    pub fn wecho_wchar(arg1: *mut WINDOW, arg2: *mut cchar_t) -> c_int;
    pub fn wget_wch(arg1: *mut WINDOW, arg2: *mut wint_t) -> c_int;
    pub fn wget_wstr(arg1: *mut WINDOW, arg2: *mut wint_t) -> c_int;
    pub fn wgetbkgrnd(arg1: *mut WINDOW, arg2: *mut cchar_t) -> c_int;
    pub fn wgetn_wstr(arg1: *mut WINDOW, arg2: *mut wint_t, arg3: c_int) -> c_int;
    pub fn whline_set(arg1: *mut WINDOW, arg2: *mut cchar_t, arg3: c_int) -> c_int;
    pub fn win_wch(arg1: *mut WINDOW, arg2: *mut cchar_t) -> c_int;
    pub fn win_wchnstr(arg1: *mut WINDOW, arg2: *mut cchar_t, arg3: c_int) -> c_int;
    pub fn win_wchstr(arg1: *mut WINDOW, arg2: *mut cchar_t) -> c_int;
    pub fn winnwstr(arg1: *mut WINDOW, arg2: *mut wchar_t, arg3: c_int) -> c_int;
    pub fn wins_nwstr(arg1: *mut WINDOW, arg2: *mut wchar_t, arg3: c_int) -> c_int;
    pub fn wins_wch(arg1: *mut WINDOW, arg2: *mut cchar_t) -> c_int;
    pub fn wins_wstr(arg1: *mut WINDOW, arg2: *mut wchar_t) -> c_int;
    pub fn winwstr(arg1: *mut WINDOW, arg2: *mut wchar_t) -> c_int;
    pub fn wunctrl(arg1: *mut cchar_t) -> *mut wchar_t;
    pub fn wvline_set(arg1: *mut WINDOW, arg2: *mut cchar_t, arg3: c_int) -> c_int;
}


////////////////////////////////////////////////////////////////////////////////
// Manually-ported preprocessor stuff

pub static COLOR_BLACK:      c_short = 0;
pub static COLOR_RED:        c_short = 1;
pub static COLOR_GREEN:      c_short = 2;
pub static COLOR_YELLOW:     c_short = 3;
pub static COLOR_BLUE:       c_short = 4;
pub static COLOR_MAGENTA:    c_short = 5;
pub static COLOR_CYAN:       c_short = 6;
pub static COLOR_WHITE:      c_short = 7;

pub const NCURSES_ATTR_SHIFT: c_int = 8;
pub static A_NORMAL: c_int = 0;
//#define A_ATTRIBUTES NCURSES_BITS(~(1U - 1U),0)
//#define A_CHARTEXT   (NCURSES_BITS(1U,0) - 1U)
pub static A_COLOR:      c_int = ((1 << 8) - 1) << (NCURSES_ATTR_SHIFT);
pub static A_STANDOUT:   c_int = 1 << (NCURSES_ATTR_SHIFT + 8);
pub static A_UNDERLINE:  c_int = 1 << (NCURSES_ATTR_SHIFT + 9);
pub static A_REVERSE:    c_int = 1 << (NCURSES_ATTR_SHIFT + 10);
pub static A_BLINK:      c_int = 1 << (NCURSES_ATTR_SHIFT + 11);
pub static A_DIM:        c_int = 1 << (NCURSES_ATTR_SHIFT + 12);
pub static A_BOLD:       c_int = 1 << (NCURSES_ATTR_SHIFT + 13);

pub static KEY_DOWN:     wint_t = 258;
pub static KEY_UP:       wint_t = 259;
pub static KEY_LEFT:     wint_t = 260;
pub static KEY_RIGHT:    wint_t = 261;

pub static KEY_F0:       wint_t = 264;

pub fn KEY_F(n: wint_t) -> wint_t {
    return KEY_F0 + n;
}


// Return values
pub static ERR: c_int = -1;
pub static OK: c_int = 0;

pub static KEY_CODE_YES: c_int = 256;

